COMPUTED VALUES:
architecture: standalone
audit:
  clientMinMessages: error
  logConnections: false
  logDisconnections: false
  logHostname: false
  logLinePrefix: ""
  logTimezone: ""
  pgAuditLog: ""
  pgAuditLogCatalog: "off"
auth:
  database: ""
  enablePostgresUser: true
  existingSecret: ""
  password: ""
  postgresPassword: ""
  replicationPassword: ""
  replicationUsername: repl_user
  secretKeys:
    adminPasswordKey: postgres-password
    replicationPasswordKey: replication-password
    userPasswordKey: password
  usePasswordFiles: false
  username: ""
backup:
  cronjob:
    annotations: {}
    command:
    - /bin/sh
    - -c
    - pg_dumpall --clean --if-exists --load-via-partition-root --quote-all-identifiers
      --no-password --file=${PGDUMP_DIR}/pg_dumpall-$(date '+%Y-%m-%d-%H-%M').pgdump
    concurrencyPolicy: Allow
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    extraVolumeMounts: []
    extraVolumes: []
    failedJobsHistoryLimit: 1
    labels: {}
    networkPolicy:
      enabled: true
    nodeSelector: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    resources: {}
    resourcesPreset: nano
    restartPolicy: OnFailure
    schedule: '@daily'
    startingDeadlineSeconds: ""
    storage:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      enabled: true
      existingClaim: ""
      mountPath: /backup/pgdump
      resourcePolicy: ""
      size: 8Gi
      storageClass: ""
      subPath: ""
      volumeClaimTemplates:
        selector: {}
    successfulJobsHistoryLimit: 3
    timeZone: ""
    ttlSecondsAfterFinished: ""
  enabled: false
clusterDomain: cluster.local
common:
  exampleValue: common-chart
  global:
    compatibility:
      openshift:
        adaptSecurityContext: auto
    imagePullSecrets: []
    imageRegistry: ""
    postgresql:
      auth:
        database: ""
        existingSecret: ""
        password: ""
        postgresPassword: ""
        secretKeys:
          adminPasswordKey: ""
          replicationPasswordKey: ""
          userPasswordKey: ""
        username: ""
      service:
        ports:
          postgresql: ""
    storageClass: ""
commonAnnotations: {}
commonLabels: {}
containerPorts:
  postgresql: 5432
diagnosticMode:
  args:
  - infinity
  command:
  - sleep
  enabled: false
extraDeploy: []
fullnameOverride: ""
global:
  compatibility:
    openshift:
      adaptSecurityContext: auto
  imagePullSecrets: []
  imageRegistry: ""
  postgresql:
    auth:
      database: ""
      existingSecret: ""
      password: ""
      postgresPassword: ""
      secretKeys:
        adminPasswordKey: ""
        replicationPasswordKey: ""
        userPasswordKey: ""
      username: ""
    service:
      ports:
        postgresql: ""
  storageClass: ""
image:
  debug: false
  digest: ""
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/postgresql
  tag: 16.2.0-debian-12-r15
kubeVersion: ""
ldap:
  basedn: ""
  binddn: ""
  bindpw: ""
  enabled: false
  port: ""
  prefix: ""
  scheme: ""
  searchAttribute: ""
  searchFilter: ""
  server: ""
  suffix: ""
  tls:
    enabled: false
  uri: ""
metrics:
  collectors: {}
  containerPorts:
    metrics: 9187
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: {}
    seccompProfile:
      type: RuntimeDefault
  customLivenessProbe: {}
  customMetrics: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: false
  extraEnvVars: []
  image:
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: 0.15.0-debian-12-r16
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  prometheusRule:
    enabled: false
    labels: {}
    namespace: ""
    rules: []
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  resources: {}
  resourcesPreset: nano
  service:
    annotations:
      prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
      prometheus.io/scrape: "true"
    clusterIP: ""
    ports:
      metrics: 9187
    sessionAffinity: None
  serviceMonitor:
    enabled: false
    honorLabels: false
    interval: ""
    jobLabel: ""
    labels: {}
    metricRelabelings: []
    namespace: ""
    relabelings: []
    scrapeTimeout: ""
    selector: {}
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
nameOverride: ""
postgresqlDataDir: /bitnami/postgresql/data
postgresqlSharedPreloadLibraries: pgaudit
primary:
  affinity: {}
  annotations: {}
  args: []
  automountServiceAccountToken: false
  command: []
  configuration: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: {}
    seccompProfile:
      type: RuntimeDefault
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  existingConfigmap: ""
  existingExtendedConfigmap: ""
  extendedConfiguration: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraPodSpec: {}
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  hostIPC: false
  hostNetwork: false
  initContainers: []
  initdb:
    args: ""
    password: ""
    postgresqlWalDir: ""
    scripts: {}
    scriptsConfigMap: ""
    scriptsSecret: ""
    user: ""
  labels: {}
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  name: primary
  networkPolicy:
    allowExternal: true
    allowExternalEgress: true
    enabled: true
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    dataSource: {}
    enabled: true
    existingClaim: ""
    labels: {}
    mountPath: /bitnami/postgresql
    selector: {}
    size: 8Gi
    storageClass: ""
    subPath: ""
    volumeName: data
  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenDeleted: Retain
    whenScaled: Retain
  pgHbaConfiguration: ""
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: Always
    supplementalGroups: []
    sysctls: []
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  resources: {}
  resourcesPreset: nano
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    headless:
      annotations: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      postgresql: ""
    ports:
      postgresql: 5432
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  sidecars: []
  standby:
    enabled: false
    primaryHost: ""
    primaryPort: ""
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  terminationGracePeriodSeconds: ""
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
psp:
  create: false
rbac:
  create: false
  rules: []
readReplicas:
  affinity: {}
  annotations: {}
  args: []
  automountServiceAccountToken: false
  command: []
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: {}
    seccompProfile:
      type: RuntimeDefault
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  extendedConfiguration: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraPodSpec: {}
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  hostIPC: false
  hostNetwork: false
  initContainers: []
  labels: {}
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  name: read
  networkPolicy:
    allowExternal: true
    allowExternalEgress: true
    enabled: true
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    dataSource: {}
    enabled: true
    existingClaim: ""
    labels: {}
    mountPath: /bitnami/postgresql
    selector: {}
    size: 8Gi
    storageClass: ""
    subPath: ""
  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenDeleted: Retain
    whenScaled: Retain
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: Always
    supplementalGroups: []
    sysctls: []
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  replicaCount: 1
  resources: {}
  resourcesPreset: nano
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    headless:
      annotations: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      postgresql: ""
    ports:
      postgresql: 5432
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 1
  terminationGracePeriodSeconds: ""
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
replication:
  applicationName: my_application
  numSynchronousReplicas: 0
  synchronousCommit: "off"
serviceAccount:
  annotations: {}
  automountServiceAccountToken: false
  create: true
  name: ""
serviceBindings:
  enabled: false
shmVolume:
  enabled: true
  sizeLimit: ""
tls:
  autoGenerated: false
  certCAFilename: ""
  certFilename: ""
  certKeyFilename: ""
  certificatesSecret: ""
  crlFilename: ""
  enabled: false
  preferServerCiphers: true
volumePermissions:
  containerSecurityContext:
    runAsGroup: 0
    runAsNonRoot: false
    runAsUser: 0
    seLinuxOptions: {}
    seccompProfile:
      type: RuntimeDefault
  enabled: false
  image:
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/os-shell
    tag: 12-debian-12-r18
  resources: {}
  resourcesPreset: nano
